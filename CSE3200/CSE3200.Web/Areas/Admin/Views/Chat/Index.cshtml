@using System.Security.Claims
@{
    ViewData["Title"] = "Admin Chat Dashboard";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    // Get user ID manually
    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<!-- Hidden field for user ID -->
<input type="hidden" id="current-user-id" value="@currentUserId" />

<div class="container-fluid">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Active Conversations</h5>
                </div>
                <div class="card-body">
                    <div id="conversation-list">
                        <p class="text-muted">Conversations will appear here</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 id="current-conversation">Select a conversation</h5>
                </div>
                <div class="card-body">
                    <div id="chat-messages" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 15px;">
                        <p class="text-muted">Select a user to start chatting</p>
                    </div>
                    <div class="mt-3">
                        <textarea id="message-input" class="form-control" placeholder="Type your message..." rows="3" disabled></textarea>
                        <button id="send-button" class="btn btn-primary mt-2" disabled>Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        let connection = null;
        let currentUserId = null;

        // Initialize SignalR connection
        function initSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Handle incoming messages
            connection.on("ReceiveMessage", (message) => {
                console.log('📩 Received real-time message:', message);

                // Convert IDs to strings for comparison
                const messageSenderId = message.senderId ? message.senderId.toString() : '';
                const messageReceiverId = message.receiverId ? message.receiverId.toString() : null;
                const currentUserIdStr = currentUserId ? currentUserId.toString() : '';
                const currentConversationStr = window.currentConversationUserId ? window.currentConversationUserId.toString() : null;

                console.log('Comparing:', {
                    messageSenderId,
                    messageReceiverId,
                    currentUserIdStr,
                    currentConversationStr
                });

                // Check if this message belongs to the current conversation
                const isForCurrentConversation =
                    (messageSenderId === currentConversationStr && messageReceiverId === currentUserIdStr) ||
                    (messageSenderId === currentUserIdStr && messageReceiverId === currentConversationStr);

                if (isForCurrentConversation) {
                    console.log('✅ Adding message to current conversation');
                    addMessageToChat(message, false);
                } else {
                    console.log('ℹ️ Message received for different conversation');
                }

                // Refresh conversations list to show new message indicator
                loadConversations();
            });

            connection.on("AdminMessageSent", (message) => {
                console.log("Admin message sent:", message);
                // Refresh conversations when admin sends a message
                loadConversations();
            });

            // Start connection
            connection.start()
                .then(() => {
                    console.log("SignalR Connected");
                    loadConversations();
                })
                .catch(err => console.error("SignalR Connection Error:", err));
        }

        // Load conversations list
        async function loadConversations() {
            try {
                const response = await fetch('/chat/api/messages');
                if (!response.ok) {
                    throw new Error('Failed to load conversations');
                }
                const messages = await response.json();
                updateConversationList(messages);
            } catch (error) {
                console.error("Error loading conversations:", error);
            }
        }

        // Update conversation list UI
                function updateConversationList(messages) {
            const conversationList = document.getElementById('conversation-list');
            if (!conversationList) return;

            if (!messages || messages.length === 0) {
                conversationList.innerHTML = '<p class="text-muted">No conversations yet</p>';
                return;
            }

            // Group messages by user
            const userMessages = {};
            messages.forEach(msg => {
                const otherUserId = msg.senderId === currentUserId ? msg.receiverId : msg.senderId;
                if (otherUserId) {
                    if (!userMessages[otherUserId]) {
                        userMessages[otherUserId] = [];
                    }
                    userMessages[otherUserId].push(msg);
                }
            });

            // Create conversation items
            conversationList.innerHTML = '';
            Object.keys(userMessages).forEach(userId => {
                const userMsgs = userMessages[userId];
                const lastMessage = userMsgs[userMsgs.length - 1];

                const div = document.createElement('div');
                div.className = 'conversation-item p-2 border-bottom';

                // USE SENDERNAME INSTEAD OF USER ID
                const displayName = lastMessage.senderName || `User: ${userId.substring(0, 8)}...`;

                div.innerHTML = `
                    <div class="fw-bold">${displayName}</div>
                    <div class="text-muted small">${lastMessage.content ? lastMessage.content.substring(0, 30) : ''}...</div>
                    <div class="text-muted smaller">${lastMessage.sentAt ? new Date(lastMessage.sentAt).toLocaleTimeString() : ''}</div>
                `;
                div.onclick = () => loadConversation(userId);
                conversationList.appendChild(div);
            });
        }

        // Load specific conversation
                async function loadConversation(userId) {
            try {
                const response = await fetch(`/chat/api/messages?userId=${userId}`);
                if (!response.ok) {
                    throw new Error('Failed to load conversation');
                }
                const messages = await response.json();

                const currentConversationEl = document.getElementById('current-conversation');
                const messageInput = document.getElementById('message-input');
                const sendButton = document.getElementById('send-button');

                // USE SENDERNAME FROM THE FIRST MESSAGE
                const displayName = messages.length > 0 ?
                    (messages[0].senderName || `User: ${userId.substring(0, 8)}...`) :
                    `User: ${userId.substring(0, 8)}...`;

                if (currentConversationEl) {
                    currentConversationEl.textContent = `Conversation with ${displayName}`;
                }

                if (messageInput) messageInput.disabled = false;
                if (sendButton) sendButton.disabled = false;

                const chatMessages = document.getElementById('chat-messages');
                if (chatMessages) {
                    chatMessages.innerHTML = '';

                    messages.forEach(msg => {
                        addMessageToChat(msg, true);
                    });

                    // Scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                // Store current conversation user ID
                window.currentConversationUserId = userId;
            } catch (error) {
                console.error("Error loading conversation:", error);
            }
        }

        // Add message to chat UI
        function addMessageToChat(message, isHistorical) {
            const chatMessages = document.getElementById('chat-messages');
            if (!chatMessages) return;

            const messageDiv = document.createElement('div');

            // Convert IDs to strings for proper comparison
            const messageSenderId = message.senderId ? message.senderId.toString() : '';
            const currentUserIdStr = currentUserId ? currentUserId.toString() : '';

            messageDiv.className = `message ${messageSenderId === currentUserIdStr ? 'message-sent' : 'message-received'}`;
            messageDiv.innerHTML = `
                <div class="message-content ${message.isFromAdmin ? 'admin-message' : ''}">
                    <div class="message-text">${message.content || ''}</div>
                    <div class="message-time">${message.sentAt ? new Date(message.sentAt).toLocaleTimeString() : new Date().toLocaleTimeString()}</div>
                </div>
            `;

            chatMessages.appendChild(messageDiv);

            if (!isHistorical) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            console.log('✅ Message added to UI:', message.content);
        }

        // Send message
        async function sendMessage() {
            const input = document.getElementById('message-input');
            if (!input) return;

            const content = input.value.trim();
            if (!content || !window.currentConversationUserId) return;

            try {
                // Send message via SignalR
                await connection.invoke("SendMessageToUser", window.currentConversationUserId.toString(), content);

                // Create and add the sent message to UI immediately
                const chatMessages = document.getElementById('chat-messages');
                if (chatMessages) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message message-sent';
                    messageDiv.innerHTML = `
                        <div class="message-content admin-message">
                            <div class="message-text">${content}</div>
                            <div class="message-time">${new Date().toLocaleTimeString()}</div>
                        </div>
                    `;

                    // Add to chat window and scroll to bottom
                    chatMessages.appendChild(messageDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                // Clear input
                input.value = '';

            } catch (error) {
                console.error("Error sending message:", error);
                alert('Failed to send message. Please try again.');
            }
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Get current user ID from hidden field with null check
            const userIdElement = document.getElementById('current-user-id');
            if (userIdElement && userIdElement.value) {
                currentUserId = userIdElement.value;
                console.log('Current user ID:', currentUserId);
            } else {
                console.error('Current user ID not found, using fallback');
                currentUserId = '29671297-6bd9-476a-f172-08ddddda291f'; // Fallback
            }

            initSignalR();

            // Set up send button
            const sendButton = document.getElementById('send-button');
            if (sendButton) {
                sendButton.onclick = sendMessage;
            }

            // Send on Enter key
            const messageInput = document.getElementById('message-input');
            if (messageInput) {
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });
            }
        });
    </script>

    <style>
        .message {
            margin-bottom: 10px;
        }

        .message-sent {
            text-align: right;
        }

        .message-received {
            text-align: left;
        }

        .message-content {
            display: inline-block;
            padding: 8px 12px;
            border-radius: 15px;
            max-width: 70%;
        }

        .message-sent .message-content {
            background-color: #007bff;
            color: white;
        }

        .message-received .message-content {
            background-color: #f1f1f1;
            color: #333;
        }

        .admin-message {
            border: 2px solid #28a745;
        }

        .message-time {
            font-size: 0.7em;
            color: #666;
            margin-top: 2px;
        }

        .conversation-item:hover {
            background-color: #f8f9fa;
            cursor: pointer;
        }

        #chat-messages {
            background-color: #fafafa;
            border-radius: 5px;
        }
    </style>
}