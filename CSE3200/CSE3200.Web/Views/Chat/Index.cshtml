@using System.Security.Claims
@{
    ViewData["Title"] = "Chat Support";
    Layout = "_Layout";

    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var isAdmin = User.IsInRole("Admin");
}

<input type="hidden" id="current-user-id" value="@currentUserId" />
<input type="hidden" id="is-admin" value="@isAdmin.ToString().ToLower()" />

@if (isAdmin)
{
    <!-- Admin should be redirected to admin area, but show message just in case -->
    <div class="container mt-4">
        <div class="alert alert-info">
            <h4>Admin Chat Dashboard</h4>
            <p>You are being redirected to the admin chat interface...</p>
            <a href="/Admin/Chat" class="btn btn-primary">Go to Admin Chat</a>
        </div>
    </div>
}
else
{
    <!-- User Chat Interface -->
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-headset me-2"></i>Chat with Support
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="chat-messages" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 15px; margin-bottom: 15px; background-color: #f8f9fa;">
                            <div class="text-center text-muted py-4">
                                <i class="fas fa-comments fa-2x mb-2"></i>
                                <p>Start a conversation with our support team</p>
                            </div>
                        </div>
                        <div class="mt-3">
                            <textarea id="message-input" class="form-control" placeholder="Type your message to support..." rows="3"></textarea>
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <small class="text-muted">Press Enter to send, Shift+Enter for new line</small>
                                <button id="send-button" class="btn btn-success">
                                    <i class="fas fa-paper-plane me-1"></i> Send
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
        let connection = null;
        let currentUserId = document.getElementById('current-user-id').value;
        let isAdmin = document.getElementById('is-admin').value === 'true'; // FIXED: Properly get isAdmin from hidden field

        // If user is admin, redirect to admin chat
        if (isAdmin) {
            window.location.href = '/Admin/Chat';
        }

        // Initialize SignalR connection
        function initSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Handle incoming messages
            connection.on("ReceiveMessage", (message) => {
                console.log('📩 Received message:', message);
                addMessageToChat(message, false);

                // Scroll to bottom
                const chatMessages = document.getElementById('chat-messages');
                if (chatMessages) {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            });

            // Start connection
            connection.start()
                .then(() => {
                    console.log("SignalR Connected");
                    loadUserMessages();
                })
                .catch(err => console.error("SignalR Connection Error:", err));
        }

        // Load messages for user
        async function loadUserMessages() {
            try {
                const response = await fetch('/Chat/GetMessages');
                if (response.ok) {
                    const messages = await response.json();
                    displayMessages(messages);
                }
            } catch (error) {
                console.error("Error loading messages:", error);
            }
        }

        // Display messages in chat
        function displayMessages(messages) {
            const chatMessages = document.getElementById('chat-messages');
            if (!chatMessages) return;

            // Clear loading message
            chatMessages.innerHTML = '';

            if (messages.length === 0) {
                chatMessages.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-comments fa-2x mb-2"></i>
                        <p>No messages yet. Start the conversation!</p>
                    </div>
                `;
                return;
            }

            messages.forEach(msg => {
                addMessageToChat(msg, true);
            });

            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Add message to chat UI
        function addMessageToChat(message, isHistorical) {
            const chatMessages = document.getElementById('chat-messages');
            if (!chatMessages) return;

            // Clear welcome message if it's the first real message
            if (chatMessages.querySelector('.text-center')) {
                chatMessages.innerHTML = '';
            }

            const messageDiv = document.createElement('div');
            const messageSenderId = message.senderId ? message.senderId.toString() : '';
            const currentUserIdStr = currentUserId ? currentUserId.toString() : '';
            const isFromMe = messageSenderId === currentUserIdStr;

            messageDiv.className = `message ${isFromMe ? 'message-sent' : 'message-received'}`;

            const messageTime = message.sentAt ? new Date(message.sentAt) : new Date();
            const displayName = isFromMe ? 'You' : (message.isFromAdmin ? 'Support' : 'User');

            messageDiv.innerHTML = `
                <div class="message-content ${message.isFromAdmin ? 'admin-message' : ''}">
                    ${!isFromMe ? `<div class="message-sender small fw-bold">${displayName}</div>` : ''}
                    <div class="message-text">${escapeHtml(message.content || '')}</div>
                    <div class="message-time">${formatTime(messageTime)}</div>
                </div>
            `;

            chatMessages.appendChild(messageDiv);

            if (!isHistorical) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Send message
        async function sendMessage() {
            const input = document.getElementById('message-input');
            if (!input) return;

            const content = input.value.trim();
            if (!content) return;

            try {
                // For users, send to default admin
                const receiverId = '29671297-6bd9-476a-f172-08ddddda291f'; // Default admin ID

                // Send via API
                const response = await fetch('/Chat/Send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        receiverId: receiverId,
                        content: content
                    })
                });

                if (response.ok) {
                    const result = await response.json();

                    // Add to UI immediately (optimistic update)
                    addMessageToChat({
                        id: result.messageId,
                        senderId: currentUserId,
                        content: content,
                        sentAt: new Date().toISOString(),
                        isFromAdmin: false
                    }, false);

                    // Clear input
                    input.value = '';
                    input.focus();
                } else {
                    throw new Error('Failed to send message');
                }
            } catch (error) {
                console.error("Error sending message:", error);
                alert('Failed to send message. Please try again.');
            }
        }

        // Utility functions
        function formatTime(date) {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Only initialize if user is not admin
            if (!isAdmin) {
                initSignalR();

                // Set up send button
                const sendButton = document.getElementById('send-button');
                if (sendButton) {
                    sendButton.onclick = sendMessage;
                }

                // Send on Enter key
                const messageInput = document.getElementById('message-input');
                if (messageInput) {
                    messageInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault();
                            sendMessage();
                        }
                    });

                    // Auto-focus
                    setTimeout(() => messageInput.focus(), 500);
                }
            }
        });
    </script>

    <style>
        .message {
            margin-bottom: 15px;
        }

        .message-sent {
            text-align: right;
        }

        .message-received {
            text-align: left;
        }

        .message-content {
            display: inline-block;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 70%;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message-sent .message-content {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            border-bottom-right-radius: 5px;
        }

        .message-received .message-content {
            background: white;
            color: #333;
            border-bottom-left-radius: 5px;
            border: 1px solid #e9ecef;
        }

        .admin-message {
            border-left: 4px solid #28a745;
        }

        .message-sender {
            margin-bottom: 4px;
            opacity: 0.8;
            font-size: 0.8em;
        }

        .message-time {
            font-size: 0.7em;
            opacity: 0.7;
            margin-top: 4px;
        }

        #chat-messages {
            scroll-behavior: smooth;
        }

            /* Scrollbar styling */
            #chat-messages::-webkit-scrollbar {
                width: 6px;
            }

            #chat-messages::-webkit-scrollbar-track {
                background: #f1f1f1;
                border-radius: 3px;
            }

            #chat-messages::-webkit-scrollbar-thumb {
                background: #c1c1c1;
                border-radius: 3px;
            }
    </style>
}