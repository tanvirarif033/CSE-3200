@using System.Security.Claims
@{
    ViewData["Title"] = "Chat Support";
    Layout = "_Layout"; // Uses main layout

    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var isAdmin = User.IsInRole("Admin");
}

<input type="hidden" id="current-user-id" value="@currentUserId" />
<input type="hidden" id="is-admin" value="@isAdmin.ToString().ToLower()" />

@if (isAdmin)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Active Conversations</h5>
                    </div>
                    <div class="card-body">
                        <div id="conversation-list">
                            <p class="text-muted">Conversations will appear here</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 id="current-conversation">Select a conversation</h5>
                    </div>
                    <div class="card-body">
                        <div id="chat-messages" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 15px;">
                            <p class="text-muted">Select a user to start chatting</p>
                        </div>
                        <div class="mt-3">
                            <textarea id="message-input" class="form-control" placeholder="Type your message..." rows="3" disabled></textarea>
                            <button id="send-button" class="btn btn-primary mt-2" disabled>Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8 mx-auto">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5>Chat with Support</h5>
                    </div>
                    <div class="card-body">
                        <div id="chat-messages" style="height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 15px;">
                            <p class="text-muted">Your messages with support will appear here...</p>
                        </div>
                        <div class="mt-3">
                            <textarea id="message-input" class="form-control" placeholder="Type your message to support..." rows="3"></textarea>
                            <button id="send-button" class="btn btn-primary mt-2">Send to Support</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        let connection = null;
        let currentUserId = document.getElementById('current-user-id').value;
        let isAdmin = document.getElementById('is-admin').value === 'true';

        // Initialize SignalR connection
        function initSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Handle incoming messages
            connection.on("ReceiveMessage", (message) => {
                console.log('📩 Received message:', message);
                addMessageToChat(message, false);

                if (isAdmin) {
                    // If admin, reload conversations to update the list
                    if (typeof loadConversations === 'function') {
                        loadConversations();
                    }
                }
            });

            // Start connection
            connection.start()
                .then(() => {
                    console.log("SignalR Connected");
                    if (isAdmin) {
                        // Load admin conversations if function exists
                        if (typeof loadConversations === 'function') {
                            loadConversations();
                        }
                    } else {
                        loadUserMessages();
                    }
                })
                .catch(err => console.error("SignalR Connection Error:", err));
        }

        // Load messages for regular users
        async function loadUserMessages() {
            try {
                const response = await fetch('/chat/api/messages');
                if (response.ok) {
                    const messages = await response.json();
                    const chatMessages = document.getElementById('chat-messages');
                    if (chatMessages) {
                        chatMessages.innerHTML = '';

                        messages.forEach(msg => {
                            addMessageToChat(msg, true);
                        });

                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }
                }
            } catch (error) {
                console.error("Error loading messages:", error);
            }
        }

        // Send message
        async function sendMessage() {
            const input = document.getElementById('message-input');
            if (!input) return;

            const content = input.value.trim();
            if (!content) return;

            try {
                let receiverId = null;

                if (isAdmin) {
                    // Admin sends to selected user
                    receiverId = window.currentConversationUserId;
                    if (!receiverId) {
                        alert('Please select a conversation first');
                        return;
                    }
                } else {
                    // User sends to admin (use your admin ID)
                    receiverId = '29671297-6bd9-476a-f172-08ddddda291f';
                }

                // Send via API instead of SignalR for reliability
                const response = await fetch('/chat/api/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        receiverId: receiverId,
                        content: content
                    })
                });

                if (response.ok) {
                    // Add to UI immediately
                    addMessageToChat({
                        senderId: currentUserId,
                        content: content,
                        sentAt: new Date().toISOString(),
                        isFromAdmin: isAdmin
                    }, false);

                    input.value = '';
                } else {
                    throw new Error('Failed to send message');
                }
            } catch (error) {
                console.error("Error sending message:", error);
                alert('Failed to send message. Please try again.');
            }
        }

        // Add message to chat UI
        function addMessageToChat(message, isHistorical) {
            const chatMessages = document.getElementById('chat-messages');
            if (!chatMessages) return;

            const messageDiv = document.createElement('div');

            // Convert IDs to strings for comparison
            const messageSenderId = message.senderId ? message.senderId.toString() : '';
            const currentUserIdStr = currentUserId ? currentUserId.toString() : '';

            const isFromMe = messageSenderId === currentUserIdStr;
            messageDiv.className = `message ${isFromMe ? 'message-sent' : 'message-received'}`;
            messageDiv.innerHTML = `
                <div class="message-content ${message.isFromAdmin ? 'admin-message' : ''}">
                    <div class="message-text">${message.content || ''}</div>
                    <div class="message-time">${message.sentAt ? new Date(message.sentAt).toLocaleTimeString() : new Date().toLocaleTimeString()}</div>
                </div>
            `;

            chatMessages.appendChild(messageDiv);
            if (!isHistorical) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initSignalR();

            // Set up send button
            const sendButton = document.getElementById('send-button');
            if (sendButton) {
                sendButton.onclick = sendMessage;
            }

            // Send on Enter key
            const messageInput = document.getElementById('message-input');
            if (messageInput) {
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });
            }

            // Enable input for non-admin users immediately
            if (!isAdmin) {
                if (messageInput) messageInput.disabled = false;
                if (sendButton) sendButton.disabled = false;
            }
        });

        // Admin-specific functions - only define if admin
        @if (User.IsInRole("Admin"))
        {
                <text>
                // Admin conversation management functions
                async function loadConversations() {
                    try {
                        const response = await fetch('/chat/api/messages');
                        if (response.ok) {
                            const messages = await response.json();
                            updateConversationList(messages);
                        }
                    } catch (error) {
                        console.error("Error loading conversations:", error);
                    }
                }

                function updateConversationList(messages) {
                    const conversationList = document.getElementById('conversation-list');
                    if (!conversationList) return;

                    if (!messages || messages.length === 0) {
                        conversationList.innerHTML = '<p class="text-muted">No conversations yet</p>';
                        return;
                    }

                    // Group messages by user
                    const userMessages = {};
                    messages.forEach(msg => {
                        const otherUserId = msg.senderId === currentUserId ? msg.receiverId : msg.senderId;
                        if (otherUserId) {
                            if (!userMessages[otherUserId]) {
                                userMessages[otherUserId] = [];
                            }
                            userMessages[otherUserId].push(msg);
                        }
                    });

                    // Create conversation items
                    conversationList.innerHTML = '';
                    Object.keys(userMessages).forEach(userId => {
                        const userMsgs = userMessages[userId];
                        const lastMessage = userMsgs[userMsgs.length - 1];

                        const div = document.createElement('div');
                        div.className = 'conversation-item p-2 border-bottom';
                        div.innerHTML = `
                            <div class="fw-bold">User: ${userId.substring(0, 8)}...</div>
                            <div class="text-muted small">${lastMessage.content ? lastMessage.content.substring(0, 30) : ''}...</div>
                            <div class="text-muted smaller">${lastMessage.sentAt ? new Date(lastMessage.sentAt).toLocaleTimeString() : ''}</div>
                        `;
                        div.onclick = () => loadConversation(userId);
                        conversationList.appendChild(div);
                    });
                }

                async function loadConversation(userId) {
                    try {
                        const response = await fetch(`/chat/api/messages?userId=${userId}`);
                        if (response.ok) {
                            const messages = await response.json();

                            const currentConversationEl = document.getElementById('current-conversation');
                            const messageInput = document.getElementById('message-input');
                            const sendButton = document.getElementById('send-button');

                            if (currentConversationEl) {
                                currentConversationEl.textContent = `Conversation with User: ${userId.substring(0, 8)}...`;
                            }
                            if (messageInput) messageInput.disabled = false;
                            if (sendButton) sendButton.disabled = false;

                            const chatMessages = document.getElementById('chat-messages');
                            if (chatMessages) {
                                chatMessages.innerHTML = '';

                                messages.forEach(msg => {
                                    addMessageToChat(msg, true);
                                });

                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }

                            // Store current conversation user ID
                            window.currentConversationUserId = userId;
                        }
                    } catch (error) {
                        console.error("Error loading conversation:", error);
                    }
                }
                </text>
        }
    </script>

    <style>
        .message {
            margin-bottom: 10px;
        }

        .message-sent {
            text-align: right;
        }

        .message-received {
            text-align: left;
        }

        .message-content {
            display: inline-block;
            padding: 8px 12px;
            border-radius: 15px;
            max-width: 70%;
        }

        .message-sent .message-content {
            background-color: #007bff;
            color: white;
        }

        .message-received .message-content {
            background-color: #f1f1f1;
            color: #333;
        }

        .admin-message {
            border: 2px solid #28a745;
        }

        .message-time {
            font-size: 0.7em;
            color: #666;
            margin-top: 2px;
        }

        .conversation-item:hover {
            background-color: #f8f9fa;
            cursor: pointer;
        }

        #chat-messages {
            background-color: #fafafa;
            border-radius: 5px;
        }
    </style>
}